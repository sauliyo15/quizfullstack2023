#!/usr/bin/env node

//Se importan los modulos necesarios
var app = require('../app');
var debug = require('debug')('quizfullstack2023:server');
var http = require('http');

//Se importan los modulos necesarios para la redireccion a HTTPS
var https = require('https'); //codigo del servidor https
var fs = require('fs');       //acceso a ficheros del servidor
var path = require('path');   //gestor de rutas
var os = require('os');       //propiedades del sistema operativo

//Se obtiene de la variable de entorno el puerto o se asigna el puerto 3000 por defecto
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

//Creacion del servidor http
var server = http.createServer(app);

///Se arranca el servidor y se definen los eventos error y listening
server.listen(port);
server.on('error', onError.bind(undefined, port));
server.on('listening', onListening.bind(undefined, server));


///Crea el servidor HTTPS solo si existen los certificados
try {
  const options = {
      key: fs.readFileSync("../etc/certificates/llave.pem"),
      cert: fs.readFileSync("../etc/certificates/certificado.pem"),
      ca: fs.readFileSync("../etc/certificates/cadDigiCertCA.pem")
  };

  var sport = normalizePort(process.env.SPORT || '3443');
  app.set('sport', sport);

  // Create HTTPS server.
  const secureServer = https.createServer(options, app);

  secureServer.listen(sport);

  secureServer.on('error', onError.bind(undefined, sport));
  secureServer.on('listening', onListening.bind(undefined, secureServer));

} catch (err) {
    if (err.code === 'ENOENT') {
      debug("There are no SSL certificate files. No HTTPS Server created.");
    } 
    else {
      debug(`ERROR: ${err.message || err}.`);
    }
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

//Para HTTPs se añade a esta funcion el parametro explicito port
function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

//Para HTTPs se añade a esta funcion el parametro explicito server
function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
